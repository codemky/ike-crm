<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ike.mapper.ReturnPlanDetailMapper" >
  <resultMap id="BaseResultMap" type="com.ike.pojo.ReturnPlanDetail" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="return_plan_id" property="returnPlanId" jdbcType="BIGINT" />
    <result column="return_number" property="returnNumber" jdbcType="INTEGER" />
    <result column="return_money" property="returnMoney" jdbcType="DOUBLE" />
    <result column="time_interval" property="timeInterval" jdbcType="INTEGER" />
    <result column="create_user_id" property="createUserId" jdbcType="BIGINT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="modify_user_id" property="modifyUserId" jdbcType="BIGINT" />
    <result column="modify_time" property="modifyTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, return_plan_id, return_number, return_money, time_interval, create_user_id, create_time, 
    modify_user_id, modify_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.ike.pojo.ReturnPlanDetailExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from return_plan_detail
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from return_plan_detail
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from return_plan_detail
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.ike.pojo.ReturnPlanDetailExample" >
    delete from return_plan_detail
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ike.pojo.ReturnPlanDetail" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into return_plan_detail (return_plan_id, return_number, return_money, 
      time_interval, create_user_id, create_time, 
      modify_user_id, modify_time)
    values (#{returnPlanId,jdbcType=BIGINT}, #{returnNumber,jdbcType=INTEGER}, #{returnMoney,jdbcType=DOUBLE}, 
      #{timeInterval,jdbcType=INTEGER}, #{createUserId,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, 
      #{modifyUserId,jdbcType=BIGINT}, #{modifyTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.ike.pojo.ReturnPlanDetail" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into return_plan_detail
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="returnPlanId != null" >
        return_plan_id,
      </if>
      <if test="returnNumber != null" >
        return_number,
      </if>
      <if test="returnMoney != null" >
        return_money,
      </if>
      <if test="timeInterval != null" >
        time_interval,
      </if>
      <if test="createUserId != null" >
        create_user_id,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="modifyUserId != null" >
        modify_user_id,
      </if>
      <if test="modifyTime != null" >
        modify_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="returnPlanId != null" >
        #{returnPlanId,jdbcType=BIGINT},
      </if>
      <if test="returnNumber != null" >
        #{returnNumber,jdbcType=INTEGER},
      </if>
      <if test="returnMoney != null" >
        #{returnMoney,jdbcType=DOUBLE},
      </if>
      <if test="timeInterval != null" >
        #{timeInterval,jdbcType=INTEGER},
      </if>
      <if test="createUserId != null" >
        #{createUserId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyUserId != null" >
        #{modifyUserId,jdbcType=BIGINT},
      </if>
      <if test="modifyTime != null" >
        #{modifyTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ike.pojo.ReturnPlanDetailExample" resultType="java.lang.Integer" >
    select count(*) from return_plan_detail
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update return_plan_detail
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.returnPlanId != null" >
        return_plan_id = #{record.returnPlanId,jdbcType=BIGINT},
      </if>
      <if test="record.returnNumber != null" >
        return_number = #{record.returnNumber,jdbcType=INTEGER},
      </if>
      <if test="record.returnMoney != null" >
        return_money = #{record.returnMoney,jdbcType=DOUBLE},
      </if>
      <if test="record.timeInterval != null" >
        time_interval = #{record.timeInterval,jdbcType=INTEGER},
      </if>
      <if test="record.createUserId != null" >
        create_user_id = #{record.createUserId,jdbcType=BIGINT},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.modifyUserId != null" >
        modify_user_id = #{record.modifyUserId,jdbcType=BIGINT},
      </if>
      <if test="record.modifyTime != null" >
        modify_time = #{record.modifyTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update return_plan_detail
    set id = #{record.id,jdbcType=BIGINT},
      return_plan_id = #{record.returnPlanId,jdbcType=BIGINT},
      return_number = #{record.returnNumber,jdbcType=INTEGER},
      return_money = #{record.returnMoney,jdbcType=DOUBLE},
      time_interval = #{record.timeInterval,jdbcType=INTEGER},
      create_user_id = #{record.createUserId,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      modify_user_id = #{record.modifyUserId,jdbcType=BIGINT},
      modify_time = #{record.modifyTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ike.pojo.ReturnPlanDetail" >
    update return_plan_detail
    <set >
      <if test="returnPlanId != null" >
        return_plan_id = #{returnPlanId,jdbcType=BIGINT},
      </if>
      <if test="returnNumber != null" >
        return_number = #{returnNumber,jdbcType=INTEGER},
      </if>
      <if test="returnMoney != null" >
        return_money = #{returnMoney,jdbcType=DOUBLE},
      </if>
      <if test="timeInterval != null" >
        time_interval = #{timeInterval,jdbcType=INTEGER},
      </if>
      <if test="createUserId != null" >
        create_user_id = #{createUserId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyUserId != null" >
        modify_user_id = #{modifyUserId,jdbcType=BIGINT},
      </if>
      <if test="modifyTime != null" >
        modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ike.pojo.ReturnPlanDetail" >
    update return_plan_detail
    set return_plan_id = #{returnPlanId,jdbcType=BIGINT},
      return_number = #{returnNumber,jdbcType=INTEGER},
      return_money = #{returnMoney,jdbcType=DOUBLE},
      time_interval = #{timeInterval,jdbcType=INTEGER},
      create_user_id = #{createUserId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      modify_user_id = #{modifyUserId,jdbcType=BIGINT},
      modify_time = #{modifyTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>